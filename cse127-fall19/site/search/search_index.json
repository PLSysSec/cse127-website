{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This course focuses on computer security, covering a wide range of topics on both the \"defensive\" and \"offensive\" side of this field. Among these will be systems security and exploitation (buffer overflows, race conditions, SQL injection, etc), access control and authentication, covert channels, network security, language-based security, denial-of-service, privacy and anonymity. The goal of the course is to provide an appreciation of how to think adversarially with respect to computer systems as well as an appreciation of how to reason about attacks and defenses. To complete the projects in this course, you will need the ability to develop software programs using the C language, and some understanding of x86 assembly, JavaScript, PHP and SQL. We will not reach these in class and you will be expected to learn them on your own. If you don't know C, K&R's The C Programming Language is a great go to, but the Hacking book is probably enough and covers some x86 assembly too. Class details \u00b6 Lectures: (A) Nadia Heninger: Mondays and Wednesdays, 2pm - 3:20pm in EBU3B 4140 (B) Deian Sefan: Mondays and Wednesdays, 5pm - 6:20pm in CENTR 214 Section: (A) Nadia Heninger: Fridays, 4pm-5pm in CENTR 113 (B) Deian Sefan: Fridays, 5pm-6pm in CENTR 113 Piazza: https://piazza.com/ucsd/fall2019/cse127/home Gradescope https://www.gradescope.com/courses/66491 Access Code: 92EP32 Textbook \u00b6 We will occasionally be assinging readings from Ross Anderson's Security Engineering and various other online resources and papers. We may also assign optional reading from Jon Erickson's Hacking: The Art of Exploitation . Grading \u00b6 40% Assignments 25% Midterm exam 35% Final exam +5% Participation in class and online Programming assignments \u00b6 We will have assignments that are meant to both reinforce your knowledge of the concepts covered in lecture and get you to think about security in more depth, beyond what is covered lecture. You are expected to work on the assignments by yourself. You may discuss the assignments with students from the course, in general, but not any specific solution. There are no late days, but you will receive an additional 10% if you turn in your assignment by the early date. If you consult anything (books, academic papers, internet resources, people not in your group) when working on the assignments, note this in your submission. We encourage outside learning but expect you to not seek out specific details about a solution -- anything submitted should be considered your own work. Similarly, you are expected to not publish or otherwise share your solutions at any point (even after the class is over). If you are unsure about what is allowed, please ask the course staff. Exams \u00b6 The midterm is closed-book , but you may use a double-sided cheat sheet (letter-size). The final is closed-book , but you may use 2 double-sided cheat sheets (letter-size). The exams will make up 60% of your grade. Since the final is cumulative your midterm grade will be calculated as: midterm > 0 ? max(final, midterm) : 0 This means that (1) you basically get a second chance if you don't so well on the midterm and (2) you must show up to both the midterm and the final. If you need to miss either exam because of a documented medical emergency, contact the instructor immediately. Participation/pre-lecture readings \u00b6 Before each class there will be some assigned reading. You are expected to do the reading and have at least a vague understanding of the concepts that will be discussed in class. This will allow us to spend the lecture time to solidify your understanding. Asking and answering questions in class, on Piazza, or during office hours counts towards your class participation. Contributing to the class lecture notes will similarly be rewarded with extra points. Acknowledgements \u00b6 The course structure and many of the ideas and slides are influenced or directly from Kirill Levchenko , Dan Boneh , Stefan Savage , Hovav Shacham , and John Mitchell . Academic integrity and student conduct \u00b6 By taking this course, you implicitly agree to abide by the UCSD policies on Integrity of Scholarship and Student Conduct . University rules on integrity of scholarship and code of conduct are taken seriously and will be enforced.","title":"About"},{"location":"#class-details","text":"Lectures: (A) Nadia Heninger: Mondays and Wednesdays, 2pm - 3:20pm in EBU3B 4140 (B) Deian Sefan: Mondays and Wednesdays, 5pm - 6:20pm in CENTR 214 Section: (A) Nadia Heninger: Fridays, 4pm-5pm in CENTR 113 (B) Deian Sefan: Fridays, 5pm-6pm in CENTR 113 Piazza: https://piazza.com/ucsd/fall2019/cse127/home Gradescope https://www.gradescope.com/courses/66491 Access Code: 92EP32","title":"Class details"},{"location":"#textbook","text":"We will occasionally be assinging readings from Ross Anderson's Security Engineering and various other online resources and papers. We may also assign optional reading from Jon Erickson's Hacking: The Art of Exploitation .","title":"Textbook"},{"location":"#grading","text":"40% Assignments 25% Midterm exam 35% Final exam +5% Participation in class and online","title":"Grading"},{"location":"#programming-assignments","text":"We will have assignments that are meant to both reinforce your knowledge of the concepts covered in lecture and get you to think about security in more depth, beyond what is covered lecture. You are expected to work on the assignments by yourself. You may discuss the assignments with students from the course, in general, but not any specific solution. There are no late days, but you will receive an additional 10% if you turn in your assignment by the early date. If you consult anything (books, academic papers, internet resources, people not in your group) when working on the assignments, note this in your submission. We encourage outside learning but expect you to not seek out specific details about a solution -- anything submitted should be considered your own work. Similarly, you are expected to not publish or otherwise share your solutions at any point (even after the class is over). If you are unsure about what is allowed, please ask the course staff.","title":"Programming assignments"},{"location":"#exams","text":"The midterm is closed-book , but you may use a double-sided cheat sheet (letter-size). The final is closed-book , but you may use 2 double-sided cheat sheets (letter-size). The exams will make up 60% of your grade. Since the final is cumulative your midterm grade will be calculated as: midterm > 0 ? max(final, midterm) : 0 This means that (1) you basically get a second chance if you don't so well on the midterm and (2) you must show up to both the midterm and the final. If you need to miss either exam because of a documented medical emergency, contact the instructor immediately.","title":"Exams"},{"location":"#participationpre-lecture-readings","text":"Before each class there will be some assigned reading. You are expected to do the reading and have at least a vague understanding of the concepts that will be discussed in class. This will allow us to spend the lecture time to solidify your understanding. Asking and answering questions in class, on Piazza, or during office hours counts towards your class participation. Contributing to the class lecture notes will similarly be rewarded with extra points.","title":"Participation/pre-lecture readings"},{"location":"#acknowledgements","text":"The course structure and many of the ideas and slides are influenced or directly from Kirill Levchenko , Dan Boneh , Stefan Savage , Hovav Shacham , and John Mitchell .","title":"Acknowledgements"},{"location":"#academic-integrity-and-student-conduct","text":"By taking this course, you implicitly agree to abide by the UCSD policies on Integrity of Scholarship and Student Conduct . University rules on integrity of scholarship and code of conduct are taken seriously and will be enforced.","title":"Academic integrity and student conduct"},{"location":"contact/","text":"For general information and questions, please post to the class Piazza . It's very likely that other students will have the same question. We will post announcements on Piazza, so please make sure to sign up. For urgent or personal matters, please post a private question. Instructors \u00b6 Name : Nadia Heninger Email: nadiah@cs.ucsd.edu Address: 3138 EBU3B Name: Deian Stefan Email: deian+cse127@cs.ucsd.edu Address: 3126 EBU3B Office Hours: Wednesday 3:30-4:30pm in 3126 or 3138 EBU3B Teaching Assistants \u00b6 Name: Sunjay Cauligi Office Hours: Thursday 2-3pm B260A EBU3B Name: Craig Disselkoen Office Hours: Monday 11am-12pm B270A EBU3B Name: John Renner Office Hours: Friday 1:30-2:30 3148 EBU3B Name: Zaki Siddiqui Office Hours: Tuesday 2-3pm B260A EBU3B","title":"Contact Info and Office Hours"},{"location":"contact/#instructors","text":"Name : Nadia Heninger Email: nadiah@cs.ucsd.edu Address: 3138 EBU3B Name: Deian Stefan Email: deian+cse127@cs.ucsd.edu Address: 3126 EBU3B Office Hours: Wednesday 3:30-4:30pm in 3126 or 3138 EBU3B","title":"Instructors"},{"location":"contact/#teaching-assistants","text":"Name: Sunjay Cauligi Office Hours: Thursday 2-3pm B260A EBU3B Name: Craig Disselkoen Office Hours: Monday 11am-12pm B270A EBU3B Name: John Renner Office Hours: Friday 1:30-2:30 3148 EBU3B Name: Zaki Siddiqui Office Hours: Tuesday 2-3pm B260A EBU3B","title":"Teaching Assistants"},{"location":"syllabus/","text":"Date Topics Sep 30 Intro/Threat Modeling Optional reading: James Mickens' This World of Ours and USENIX Security 2018 Keynote Assignment 1: Intro Oct 2 Buffer Overflows Reading: Aleph One's Smashing the Stack for Fun and Profit Optional reading: 0x300-0x320 from Hacking. 0x200-0x270 if you don't have a strong C background. Oct 7 ASLR/W^X/ROP Assignment 2: Buffer Overflows Oct 9 CFI/Memory Safety Oct 14 OS Security/Isolation Assignment 3: Side Channels Oct 16 Malware (Stuxnet/Ransomware) Oct 21 Web Security Model Oct 23 Web Attacks (CSRF/XSS/SQLi) Assignment 4: Web Oct 28 Web Defenses Oct 30 Midterm Nov 4 Network Intro Nov 6 Network Attacks Assignment 5: Networks Nov 11 Veterans Day - no class Nov 13 Network Defenses Nov 18 Symmetric Crypto Nov 20 Hash Functions Nov 25 Asymmetric Crypto Nov 27 TLS/PKI/CT Assignment 6: Crypto Dec 2 Cipherpunk Dec 4 Ethics/Law/Policy","title":"Syllabus"},{"location":"pa/pa1/","text":"Assignment 1 (20 pts) \u00b6 Deadline: Wednesday, October 9, 2019 by 2:59:59 PM Early Turn-In: Sunday, October 6, 2019 by 1:59:59 PM (10% bonus) The goal of this assignment is to become familiar with the setup that will be used for future assignments, such as the use of a virtual machine and the included turn-in script, as well as the basics of working with gdb and writing programs in x86 assembly. Getting Started \u00b6 To complete this assignment, you will be provided with a VirtualBox VM pre-populated with the assignment files. VM Image \u00b6 In order to match the environment in which your submission will be graded, all work for this assignment must be done on the VirtualBox VM we provide, named pa1box . You can download the VM image here . The VM is configured with two users: student , with password hacktheplanet ; and root , with password hackallthethings . The VM is configured with SSH on port 2222. Please note that SSH is disabled for root , so you can only SSH in as the student user. You can still log in as root using su or by logging into the VM directly. To SSH into the VM: ssh -p 2222 student@127.0.0.1 To copy files from your computer to the VM: scp -P 2222 -r /path/to/files/ student@127.0.0.1:/home/student To copy files from the VM to your computer: scp -P 2222 student@127.0.0.1:/path/to/files/ /destination/path Part 1: Using GDB (10 pts) \u00b6 Files for this sub-assignment are located in the gdb subdirectory of the student user's home directory in the VM image; that is, /home/student/gdb . SSH into the VM and cd into that directory to begin working on it. Inside the gdb directory, you'll find fib.c , a C program demonstrating the Fibonacci sequence; a Makefile ; and hw1.txt , in which you'll record your responses to the questions below. The first step is to compile fib by running make on the command line. To run the fib executable in GDB, run gdb -e fib . Use the -s option to load a symbol file. I recommend the following workflow in GDB: Starting. Set breakpoints that you can later use for analysis: b foo \u2014 break at function foo b *0x08048489 \u2014 break at the instruction at address 0x08048489 r \u2014 run the executable Analyzing. Examine memory, registers, etc; disassemble code; show stack frames, backtrace, etc; and more: disas foo \u2014 disassemble function foo i r \u2014 view registers where \u2014 view stack frames x <loc> \u2014 examine memory x $eip \u2014 examine current instruction pointer x /10x $esp \u2014 examine 10 words at top of stack x /10x buf \u2014 examine 10 words in buf x /10i $eip \u2014 examine 10 instructions starting at instruction pointer x /10i foo \u2014 examine 10 instructions starting at foo Continuing. Continue analysis: c \u2014 continue execution until next breakpoint/watchpoint si \u2014 step to the next instruction s \u2014 step to the next line of source code Note that this is only a cursory overview of GDB; much more info is available from online resources. Assignment Instructions \u00b6 Complete the following exercises and fill out hw1.txt with your answers. What is the value, in hex, of the ecx register when the function f is called? (2 pts) Which register stores the value of the variable i in the function main? (2 pts) What is the address, in hex, of the function f ? (2 pts) What is the name of the 6th instruction of the function f ? (2 pts) When f completes after being called from main , to which address in main does control return? Write your answer in hex form. (2 pts) Submission \u00b6 Submit hw1.txt to \"1a. gdb\" on Gradescope. Login details can be found on the about page . Gradescope will check that it has successfully detected your answers, but it will not give you your grade until the due date. Part 2: echo in x86 (10 pts) \u00b6 Files for this sub-assignment are located in the x86 subdirectory of the student user's home directory in the VM image; that is, /home/student/x86 . SSH into the VM and cd into that directory to begin working on it. For this part, you will be implementing a simplified version of the familiar echo command, using raw x86 assembly code. The goal of this assignment is to familiarize you with writing programs directly in x86. Your echo command must behave as follows: When run with a single command line argument (e.g., ./echo Hello ): Prints that argument back to the console's standard output (stdout). Prints a trailing newline ( \\n ). Exits with code 0. When run with too few command line arguments (e.g., ./echo ) or too many (e.g., ./echo Hello World ): Prints exactly the error message This command expects exactly one argument. \u2014 followed by a trailing newline ( \\n ) \u2014 to the console's standard error (stderr). Exits with code 1. Your code should be written in the file echo.s inside the x86 directory. A heavily-commented example echo.s is provided, which simply prints the message Hello World (followed by a trailing newline) to stdout. Your job is to modify this program to meet the specification for echo above. A Makefile is included, so you can build the echo binary by running make from the command line. Helpful Hints \u00b6 In a Linux program, stdout is file descriptor number 1 and stderr is number 2. Linux programs start with argc at the top of the stack, accessible at 0(%esp) from x86-assembly programs. Below it is argv , the array of pointers to (null-terminated) strings passed into the program as arguments. So argv[0] can be accessed from x86-assembly programs at 4(%esp) , argv[1] at 8(%esp) , argv[2] at 12(%esp) , and so on. argv[0] is the name of the program executed, not the first argument, which is argv[1] if supplied (or 8(%esp) for our purposes). Then argc (or 0(%esp) ) will be 1 if the program was not passed any arguments, 2 if it was passed 1 argument, and so on. This table of Linux system calls may come in handy. Submission \u00b6 Submit echo.s to \"1b. x86 echo\" on Gradescope. Login details can be found on the about page . Bugs \u00b6 If you find a bug in this assignment please create an issue here .","title":"Assignment 1"},{"location":"pa/pa1/#assignment-1-20-pts","text":"Deadline: Wednesday, October 9, 2019 by 2:59:59 PM Early Turn-In: Sunday, October 6, 2019 by 1:59:59 PM (10% bonus) The goal of this assignment is to become familiar with the setup that will be used for future assignments, such as the use of a virtual machine and the included turn-in script, as well as the basics of working with gdb and writing programs in x86 assembly.","title":"Assignment 1 (20 pts)"},{"location":"pa/pa1/#getting-started","text":"To complete this assignment, you will be provided with a VirtualBox VM pre-populated with the assignment files.","title":"Getting Started"},{"location":"pa/pa1/#vm-image","text":"In order to match the environment in which your submission will be graded, all work for this assignment must be done on the VirtualBox VM we provide, named pa1box . You can download the VM image here . The VM is configured with two users: student , with password hacktheplanet ; and root , with password hackallthethings . The VM is configured with SSH on port 2222. Please note that SSH is disabled for root , so you can only SSH in as the student user. You can still log in as root using su or by logging into the VM directly. To SSH into the VM: ssh -p 2222 student@127.0.0.1 To copy files from your computer to the VM: scp -P 2222 -r /path/to/files/ student@127.0.0.1:/home/student To copy files from the VM to your computer: scp -P 2222 student@127.0.0.1:/path/to/files/ /destination/path","title":"VM Image"},{"location":"pa/pa1/#part-1-using-gdb-10-pts","text":"Files for this sub-assignment are located in the gdb subdirectory of the student user's home directory in the VM image; that is, /home/student/gdb . SSH into the VM and cd into that directory to begin working on it. Inside the gdb directory, you'll find fib.c , a C program demonstrating the Fibonacci sequence; a Makefile ; and hw1.txt , in which you'll record your responses to the questions below. The first step is to compile fib by running make on the command line. To run the fib executable in GDB, run gdb -e fib . Use the -s option to load a symbol file. I recommend the following workflow in GDB: Starting. Set breakpoints that you can later use for analysis: b foo \u2014 break at function foo b *0x08048489 \u2014 break at the instruction at address 0x08048489 r \u2014 run the executable Analyzing. Examine memory, registers, etc; disassemble code; show stack frames, backtrace, etc; and more: disas foo \u2014 disassemble function foo i r \u2014 view registers where \u2014 view stack frames x <loc> \u2014 examine memory x $eip \u2014 examine current instruction pointer x /10x $esp \u2014 examine 10 words at top of stack x /10x buf \u2014 examine 10 words in buf x /10i $eip \u2014 examine 10 instructions starting at instruction pointer x /10i foo \u2014 examine 10 instructions starting at foo Continuing. Continue analysis: c \u2014 continue execution until next breakpoint/watchpoint si \u2014 step to the next instruction s \u2014 step to the next line of source code Note that this is only a cursory overview of GDB; much more info is available from online resources.","title":"Part 1: Using GDB (10 pts)"},{"location":"pa/pa1/#assignment-instructions","text":"Complete the following exercises and fill out hw1.txt with your answers. What is the value, in hex, of the ecx register when the function f is called? (2 pts) Which register stores the value of the variable i in the function main? (2 pts) What is the address, in hex, of the function f ? (2 pts) What is the name of the 6th instruction of the function f ? (2 pts) When f completes after being called from main , to which address in main does control return? Write your answer in hex form. (2 pts)","title":"Assignment Instructions"},{"location":"pa/pa1/#submission","text":"Submit hw1.txt to \"1a. gdb\" on Gradescope. Login details can be found on the about page . Gradescope will check that it has successfully detected your answers, but it will not give you your grade until the due date.","title":"Submission"},{"location":"pa/pa1/#part-2-echo-in-x86-10-pts","text":"Files for this sub-assignment are located in the x86 subdirectory of the student user's home directory in the VM image; that is, /home/student/x86 . SSH into the VM and cd into that directory to begin working on it. For this part, you will be implementing a simplified version of the familiar echo command, using raw x86 assembly code. The goal of this assignment is to familiarize you with writing programs directly in x86. Your echo command must behave as follows: When run with a single command line argument (e.g., ./echo Hello ): Prints that argument back to the console's standard output (stdout). Prints a trailing newline ( \\n ). Exits with code 0. When run with too few command line arguments (e.g., ./echo ) or too many (e.g., ./echo Hello World ): Prints exactly the error message This command expects exactly one argument. \u2014 followed by a trailing newline ( \\n ) \u2014 to the console's standard error (stderr). Exits with code 1. Your code should be written in the file echo.s inside the x86 directory. A heavily-commented example echo.s is provided, which simply prints the message Hello World (followed by a trailing newline) to stdout. Your job is to modify this program to meet the specification for echo above. A Makefile is included, so you can build the echo binary by running make from the command line.","title":"Part 2: echo in x86 (10 pts)"},{"location":"pa/pa1/#helpful-hints","text":"In a Linux program, stdout is file descriptor number 1 and stderr is number 2. Linux programs start with argc at the top of the stack, accessible at 0(%esp) from x86-assembly programs. Below it is argv , the array of pointers to (null-terminated) strings passed into the program as arguments. So argv[0] can be accessed from x86-assembly programs at 4(%esp) , argv[1] at 8(%esp) , argv[2] at 12(%esp) , and so on. argv[0] is the name of the program executed, not the first argument, which is argv[1] if supplied (or 8(%esp) for our purposes). Then argc (or 0(%esp) ) will be 1 if the program was not passed any arguments, 2 if it was passed 1 argument, and so on. This table of Linux system calls may come in handy.","title":"Helpful Hints"},{"location":"pa/pa1/#submission_1","text":"Submit echo.s to \"1b. x86 echo\" on Gradescope. Login details can be found on the about page .","title":"Submission"},{"location":"pa/pa1/#bugs","text":"If you find a bug in this assignment please create an issue here .","title":"Bugs"}]}