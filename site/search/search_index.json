{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This course focuses on computer security, covering a wide range of topics on both the \"defensive\" and \"offensive\" side of this field. Among these will be systems security and exploitation (buffer overflows, race conditions, SQL injection, etc), access control and authentication, covert channels, network security, language-based security, denial-of-service, privacy and anonymity. The goal of the course is to provide an appreciation of how to think adversarially with respect to computer systems as well as an appreciation of how to reason about attacks and defenses. To complete the projects in this course, you will need the ability to develop software programs using the C language, and some understanding of x86 assembly, JavaScript, PHP and SQL. We will not reach these in class and you will be expected to learn them on your own. If you don't know C, K&R's The C Programming Language is a great go to, but the Hacking book is probably enough and covers some x86 assembly too. Class details \u00b6 Lectures: Mondays and Wednesdays, 6:30-7:50PM in SOLIS 104 Section: Tuesdays, 8:00-8:50PM in CENTER 105 Staff email: ucsd-cse127-winter19@googlegroups.com Piazza: https://piazza.com/ucsd/winter2019/cse127 Textbook \u00b6 We will occasionally be assinging readings from Ross Anderson's Security Engineering and various other online resources and papers. We may also assign optional reading from Jon Erickson's Hacking: The Art of Exploitation . Course Staff \u00b6 Instructor: Deian Stefan TAs: Nadah Feteih, Jonathan Luck, Kaiser Pister, and Michael Smith . Grading \u00b6 30% Homeworks assignments 30% Midterm exam 40% Final exam +5% Participation in class and online Homework and programming labs \u00b6 We will have homework assignments that are meant to both reinforce your knowledge of the concepts covered in lecture and get you to think about security in more depth, beyond what is covered lecture. You are expected to work on the assignments by yourself. You may discuss the assignments with students from the course, in general, but not any specific solution. There are no late days, but you will receive an additional 10% if you turn in your assignment by the early date. If you consult anything (books, academic papers, internet resources, people not in your group) when working on the assignments, note this in your submission. We encourage outside learning but expect you to not seek out specific details about a solution -- anything submitted should be considered your own work. Similarly, you are expected to not publish or otherwise share your solutions at any point (even after the class is over). If you are unsure about what is allowed, please ask the course staff. Exams \u00b6 The midterm exam will be held in class on February 13th. The midterm is closed-book , but you may use a double-sided cheat sheet (letter-size). The final exam will be held on March 20th in TBA from 7:00PM-9:59PM. You must take the exam at this time and location. The final is closed-book , but you may use 2 double-sided cheat sheets (letter-size). The exams will make up 70% of your grade. Since the final is cumulative your midterm grade will be calculated as: midterm > 0 ? max(final, midterm) : 0 This means that (1) you basically get a second chance if you don't so well on the midterm and (2) you must show up to both the midterm and the final. If you need to miss either exam because of a documented medical emergency, contact the instructor immediately. Participation/pre-lecture readings \u00b6 Before each class there will be some assigned reading. You are expected to do the reading and have at least a vague understanding of the concepts that will be discussed in class. This will allow us to spend the lecture time to solidify your understanding. Asking and answering questions in class, on Piazza, or during office hours counts towards your class participation. Acknowledgements \u00b6 The course structure and many of the ideas are influenced or directly from Stefan Savage, Kirill Levchenko, and Hovav Shacham. Academic integrity and student conduct \u00b6 By taking this course, you implicitly agree to abide by the UCSD policies on Integrity of Scholarship and Student Conduct . University rules on integrity of scholarship and code of conduct are taken seriously and will be enforced.","title":"About"},{"location":"#class-details","text":"Lectures: Mondays and Wednesdays, 6:30-7:50PM in SOLIS 104 Section: Tuesdays, 8:00-8:50PM in CENTER 105 Staff email: ucsd-cse127-winter19@googlegroups.com Piazza: https://piazza.com/ucsd/winter2019/cse127","title":"Class details"},{"location":"#textbook","text":"We will occasionally be assinging readings from Ross Anderson's Security Engineering and various other online resources and papers. We may also assign optional reading from Jon Erickson's Hacking: The Art of Exploitation .","title":"Textbook"},{"location":"#course-staff","text":"Instructor: Deian Stefan TAs: Nadah Feteih, Jonathan Luck, Kaiser Pister, and Michael Smith .","title":"Course Staff"},{"location":"#grading","text":"30% Homeworks assignments 30% Midterm exam 40% Final exam +5% Participation in class and online","title":"Grading"},{"location":"#homework-and-programming-labs","text":"We will have homework assignments that are meant to both reinforce your knowledge of the concepts covered in lecture and get you to think about security in more depth, beyond what is covered lecture. You are expected to work on the assignments by yourself. You may discuss the assignments with students from the course, in general, but not any specific solution. There are no late days, but you will receive an additional 10% if you turn in your assignment by the early date. If you consult anything (books, academic papers, internet resources, people not in your group) when working on the assignments, note this in your submission. We encourage outside learning but expect you to not seek out specific details about a solution -- anything submitted should be considered your own work. Similarly, you are expected to not publish or otherwise share your solutions at any point (even after the class is over). If you are unsure about what is allowed, please ask the course staff.","title":"Homework and programming labs"},{"location":"#exams","text":"The midterm exam will be held in class on February 13th. The midterm is closed-book , but you may use a double-sided cheat sheet (letter-size). The final exam will be held on March 20th in TBA from 7:00PM-9:59PM. You must take the exam at this time and location. The final is closed-book , but you may use 2 double-sided cheat sheets (letter-size). The exams will make up 70% of your grade. Since the final is cumulative your midterm grade will be calculated as: midterm > 0 ? max(final, midterm) : 0 This means that (1) you basically get a second chance if you don't so well on the midterm and (2) you must show up to both the midterm and the final. If you need to miss either exam because of a documented medical emergency, contact the instructor immediately.","title":"Exams"},{"location":"#participationpre-lecture-readings","text":"Before each class there will be some assigned reading. You are expected to do the reading and have at least a vague understanding of the concepts that will be discussed in class. This will allow us to spend the lecture time to solidify your understanding. Asking and answering questions in class, on Piazza, or during office hours counts towards your class participation.","title":"Participation/pre-lecture readings"},{"location":"#acknowledgements","text":"The course structure and many of the ideas are influenced or directly from Stefan Savage, Kirill Levchenko, and Hovav Shacham.","title":"Acknowledgements"},{"location":"#academic-integrity-and-student-conduct","text":"By taking this course, you implicitly agree to abide by the UCSD policies on Integrity of Scholarship and Student Conduct . University rules on integrity of scholarship and code of conduct are taken seriously and will be enforced.","title":"Academic integrity and student conduct"},{"location":"contact/","text":"For general information and questions, please post to the class Piazza . It's very likely that other students will have the same question. We will post announcements on Piazza, so please make sure to sign up. For urgent or personal matters, please post a private question or contact the course staff by email. Course staff email address: ucsd-cse127-winter19@googlegroups.com Instructor \u00b6 Name: Deian Stefan Email: deian+cse127@cs.ucsd.edu Address: CSE 3126 Office Hours: Monday 1-2PM or by appointment, CSE 3126 Teaching Assistants \u00b6 Name: Nadah Feteih Office Hours: Tuesday 3:30PM-4:30PM in CSE B240a Name: Kaiser Pister Office hours: Wednesday 11AM-12PM at the whiteboard outside CSE 3140 Name: Michael Smith Office hours: Thursday 6:30PM-7:30PM at the whiteboard outside CSE 3140","title":"Contact information"},{"location":"contact/#instructor","text":"Name: Deian Stefan Email: deian+cse127@cs.ucsd.edu Address: CSE 3126 Office Hours: Monday 1-2PM or by appointment, CSE 3126","title":"Instructor"},{"location":"contact/#teaching-assistants","text":"Name: Nadah Feteih Office Hours: Tuesday 3:30PM-4:30PM in CSE B240a Name: Kaiser Pister Office hours: Wednesday 11AM-12PM at the whiteboard outside CSE 3140 Name: Michael Smith Office hours: Thursday 6:30PM-7:30PM at the whiteboard outside CSE 3140","title":"Teaching Assistants"},{"location":"syllabus/","text":"Date Topics Jan 7 Overview and introduction Optional reading: Chapter 0x200 of Hacking Jan 9 Security foundations Reading: Thompson's Reflections on Trusting Trust , Ch 1 , and Ch 4.1-4.2 Jan 14 Security foundations (in-class discussion) Kirill's slides Jan 16 Stack buffer-overflows Reading: Aleph One's Smashing the Stack for Fun and Profit Optional reading: 0x300-0x320 from Hacking. 0x200-0x270 if you don't have a strong C background. Jan 21 MLK - no class Jan 23 ASLR and W^X Reading: Eternal War in Memory by Szekeres et al., ASLR , and NOEXEC Jan 28 Return-oriented programming Reading: On the Effectiveness of Address-Space Randomization by Shacham et al., The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86) by Shacham, and Hacking BLind by Bittau et al. Jan 30 Control flow integrity Reading: Control-Flow Integrity by Abadi et al., Control-Flow Bending: On the Effectiveness of Control-Flow Integrity by Carlini et al. and Control-Flow Integrity: Precision, Security, and Performance by Burow et al. Feb 4 Memory safety Reading: SoftBound: Highly Compatible and CompleteSpatial Memory Safety for C by Nagarakatte et al., Oscar: A Practical Page-Permissions-Based Scheme for Thwarting Dangling Pointers by Dang et al., and Bringing Memory Safety to WebAssembly by Disselkoen et al. Feb 6 Least privilege and privilege separation Reading: Operating Systems Security by Jaeger Feb 11 Isolation and short review Reading: Efficient Software-Based Fault Isolation by Wahbe et al. Feb 12 Midterm review Feb 13 Midterm exam (in-class) Feb 18 President's day - no class Feb 20 Feb 25 Feb 27 Mar 4 Mar 6 Mar 11 Mar 13 Advanced topics in security Mar 20 Final exam 7-9:59PM","title":"Syllabus"},{"location":"pa/pa1/","text":"Assignment 1 (20 pts) \u00b6 Deadline: Sunday, January 27, 2019 by 11:59:59 PM Early Turn-In: Thursday, January 24, 2019 by 11:59:59 PM (10% bonus) The goal of this assignment is to become familiar with the setup that will be used for future assignments, such as the use of a virtual machine and the included turn-in script, as well as the basics of working with gdb and writing programs in x86 assembly. Getting Started \u00b6 To complete this assignment, you will be provided with a VirtualBox VM pre-populated with the assignment files and a turn-in script. VM Image \u00b6 In order to match the environment in which your submission will be graded, all work for this assignment must be done on the VirtualBox VM we provide, named pa1box . You can download the VM image here . The VM is configured with two users: student , with password hacktheplanet ; and root , with password hackallthethings . The VM is configured with SSH on port 2222. Please note that SSH is disabled for root , so you can only SSH in as the student user. You can still log in as root using su or by logging into the VM directly. To SSH into the VM: ssh -p 2222 student@127.0.0.1 To copy files from your computer to the VM: scp -P 2222 -r /path/to/files/ student@127.0.0.1:/home/student To copy files from the VM to your computer: scp -P 2222 student@127.0.0.1:/path/to/files/ /destination/path Part 1: Using GDB (10 pts) \u00b6 Files for this sub-assignment are located in the gdb subdirectory of the student user's home directory in the VM image; that is, /home/student/gdb . SSH into the VM and cd into that directory to begin working on it. Inside the gdb directory, you'll find fib.c , a C program demonstrating the Fibonacci sequence; a Makefile ; and hw1.txt , in which you'll record your responses to the questions below. The first step is to compile fib by running make on the command line. To run the fib executable in GDB, run gdb -e fib . Use the -s option to load a symbol file. I recommend the following workflow in GDB: Starting. Set breakpoints that you can later use for analysis: b foo \u2014 break at function foo b *0x08048489 \u2014 break at the instruction at address 0x08048489 r \u2014 run the executable Analyzing. Examine memory, registers, etc; disassemble code; show stack frames, backtrace, etc; and more: disas foo \u2014 disassemble function foo i r \u2014 view registers where \u2014 view stack frames x <loc> \u2014 examine memory x $eip \u2014 examine current instruction pointer x /10x $esp \u2014 examine 10 words at top of stack x /10x buf \u2014 examine 10 words in buf x /10i $eip \u2014 examine 10 instructions starting at instruction pointer x /10i foo \u2014 examine 10 instructions starting at foo Continuing. Continue analysis: c \u2014 continue execution until next breakpoint/watchpoint si \u2014 step to the next instruction s \u2014 step to the next line of source code Note that this is only a cursory overview of GDB; much more info is available from online resources. Assignment Instructions \u00b6 Complete the following exercises and fill out hw1.txt with your answers. What is the value, in hex, of the ecx register when the function f is called? (2 pts) Which register stores the value of the variable i in the function main? (2 pts) What is the address, in hex, of the function f ? (2 pts) What is the name of the 6th instruction of the function f ? (2 pts) When f completes after being called from main , to which address in main does control return? Write your answer in hex form. (2 pts) Submission \u00b6 To submit your solution for this sub-assignment, run the gradinator-submit command from the /home/student/gdb directory and follow the prompts that appear. You may submit as many times as you like ahead of the deadline, but only your most recent submission will be counted. Grades for this part of the assignment will be released after the deadline has passed. Note that part 1 (gdb) and part 2 (x86) must be submitted separately . Part 2: echo in x86 (10 pts) \u00b6 Files for this sub-assignment are located in the x86 subdirectory of the student user's home directory in the VM image; that is, /home/student/x86 . SSH into the VM and cd into that directory to begin working on it. For this part, you will be implementing a simplified version of the familiar echo command, using raw x86 assembly code. The goal of this assignment is to familiarize you with writing programs directly in x86. Your echo command must behave as follows: When run with a single command line argument (e.g., ./echo Hello ): Prints that argument back to the console's standard output (stdout). Prints a trailing newline ( \\n ). Exits with code 0. When run with too few command line arguments (e.g., ./echo ) or too many (e.g., ./echo Hello World ): Prints exactly the error message This command expects exactly one argument. \u2014 followed by a trailing newline ( \\n ) \u2014 to the console's standard error (stderr). Exits with code 1. Your code should be written in the file echo.s inside the x86 directory. A heavily-commented example echo.s is provided, which simply prints the message Hello World (followed by a trailing newline) to stdout. Your job is to modify this program to meet the specification for echo above. A Makefile is included, so you can build the echo binary by running make from the command line. Helpful Hints \u00b6 In a Linux program, stdout is file descriptor number 1 and stderr is number 2. Linux programs start with argc at the top of the stack, accessible at 0(%esp) from x86-assembly programs. Below it is argv , the array of pointers to (null-terminated) strings passed into the program as arguments. So argv[0] can be accessed from x86-assembly programs at 4(%esp) , argv[1] at 8(%esp) , argv[2] at 12(%esp) , and so on. argv[0] is the name of the program executed, not the first argument, which is argv[1] if supplied (or 8(%esp) for our purposes). Then argc (or 0(%esp) ) will be 1 if the program was not passed any arguments, 2 if it was passed 1 argument, and so on. This table of Linux system calls may come in handy. Submission \u00b6 To submit your solution for this sub-assignment, run the gradinator-submit command from the /home/student/x86 directory and follow the prompts that appear. You may submit as many times as you like ahead of the deadline, but only your most recent submission will be counted. Note that part 1 (gdb) and part 2 (x86) must be submitted separately . For this part, after submitting an attempted solution, you'll subsequently receive a message from our auto-grading server to your email address associated with this class. The email will contain a breakdown of the steps it took to grade your assignment, points earned (or not) at each step, and a total score which\u2014apart from exceptional circumstances\u2014you can consider your final grade for this sub-assignment. Bugs \u00b6 If you find a bug in this assignment please create an issue here .","title":"Assignment 1"},{"location":"pa/pa1/#assignment-1-20-pts","text":"Deadline: Sunday, January 27, 2019 by 11:59:59 PM Early Turn-In: Thursday, January 24, 2019 by 11:59:59 PM (10% bonus) The goal of this assignment is to become familiar with the setup that will be used for future assignments, such as the use of a virtual machine and the included turn-in script, as well as the basics of working with gdb and writing programs in x86 assembly.","title":"Assignment 1 (20 pts)"},{"location":"pa/pa1/#getting-started","text":"To complete this assignment, you will be provided with a VirtualBox VM pre-populated with the assignment files and a turn-in script.","title":"Getting Started"},{"location":"pa/pa1/#vm-image","text":"In order to match the environment in which your submission will be graded, all work for this assignment must be done on the VirtualBox VM we provide, named pa1box . You can download the VM image here . The VM is configured with two users: student , with password hacktheplanet ; and root , with password hackallthethings . The VM is configured with SSH on port 2222. Please note that SSH is disabled for root , so you can only SSH in as the student user. You can still log in as root using su or by logging into the VM directly. To SSH into the VM: ssh -p 2222 student@127.0.0.1 To copy files from your computer to the VM: scp -P 2222 -r /path/to/files/ student@127.0.0.1:/home/student To copy files from the VM to your computer: scp -P 2222 student@127.0.0.1:/path/to/files/ /destination/path","title":"VM Image"},{"location":"pa/pa1/#part-1-using-gdb-10-pts","text":"Files for this sub-assignment are located in the gdb subdirectory of the student user's home directory in the VM image; that is, /home/student/gdb . SSH into the VM and cd into that directory to begin working on it. Inside the gdb directory, you'll find fib.c , a C program demonstrating the Fibonacci sequence; a Makefile ; and hw1.txt , in which you'll record your responses to the questions below. The first step is to compile fib by running make on the command line. To run the fib executable in GDB, run gdb -e fib . Use the -s option to load a symbol file. I recommend the following workflow in GDB: Starting. Set breakpoints that you can later use for analysis: b foo \u2014 break at function foo b *0x08048489 \u2014 break at the instruction at address 0x08048489 r \u2014 run the executable Analyzing. Examine memory, registers, etc; disassemble code; show stack frames, backtrace, etc; and more: disas foo \u2014 disassemble function foo i r \u2014 view registers where \u2014 view stack frames x <loc> \u2014 examine memory x $eip \u2014 examine current instruction pointer x /10x $esp \u2014 examine 10 words at top of stack x /10x buf \u2014 examine 10 words in buf x /10i $eip \u2014 examine 10 instructions starting at instruction pointer x /10i foo \u2014 examine 10 instructions starting at foo Continuing. Continue analysis: c \u2014 continue execution until next breakpoint/watchpoint si \u2014 step to the next instruction s \u2014 step to the next line of source code Note that this is only a cursory overview of GDB; much more info is available from online resources.","title":"Part 1: Using GDB (10 pts)"},{"location":"pa/pa1/#assignment-instructions","text":"Complete the following exercises and fill out hw1.txt with your answers. What is the value, in hex, of the ecx register when the function f is called? (2 pts) Which register stores the value of the variable i in the function main? (2 pts) What is the address, in hex, of the function f ? (2 pts) What is the name of the 6th instruction of the function f ? (2 pts) When f completes after being called from main , to which address in main does control return? Write your answer in hex form. (2 pts)","title":"Assignment Instructions"},{"location":"pa/pa1/#submission","text":"To submit your solution for this sub-assignment, run the gradinator-submit command from the /home/student/gdb directory and follow the prompts that appear. You may submit as many times as you like ahead of the deadline, but only your most recent submission will be counted. Grades for this part of the assignment will be released after the deadline has passed. Note that part 1 (gdb) and part 2 (x86) must be submitted separately .","title":"Submission"},{"location":"pa/pa1/#part-2-echo-in-x86-10-pts","text":"Files for this sub-assignment are located in the x86 subdirectory of the student user's home directory in the VM image; that is, /home/student/x86 . SSH into the VM and cd into that directory to begin working on it. For this part, you will be implementing a simplified version of the familiar echo command, using raw x86 assembly code. The goal of this assignment is to familiarize you with writing programs directly in x86. Your echo command must behave as follows: When run with a single command line argument (e.g., ./echo Hello ): Prints that argument back to the console's standard output (stdout). Prints a trailing newline ( \\n ). Exits with code 0. When run with too few command line arguments (e.g., ./echo ) or too many (e.g., ./echo Hello World ): Prints exactly the error message This command expects exactly one argument. \u2014 followed by a trailing newline ( \\n ) \u2014 to the console's standard error (stderr). Exits with code 1. Your code should be written in the file echo.s inside the x86 directory. A heavily-commented example echo.s is provided, which simply prints the message Hello World (followed by a trailing newline) to stdout. Your job is to modify this program to meet the specification for echo above. A Makefile is included, so you can build the echo binary by running make from the command line.","title":"Part 2: echo in x86 (10 pts)"},{"location":"pa/pa1/#helpful-hints","text":"In a Linux program, stdout is file descriptor number 1 and stderr is number 2. Linux programs start with argc at the top of the stack, accessible at 0(%esp) from x86-assembly programs. Below it is argv , the array of pointers to (null-terminated) strings passed into the program as arguments. So argv[0] can be accessed from x86-assembly programs at 4(%esp) , argv[1] at 8(%esp) , argv[2] at 12(%esp) , and so on. argv[0] is the name of the program executed, not the first argument, which is argv[1] if supplied (or 8(%esp) for our purposes). Then argc (or 0(%esp) ) will be 1 if the program was not passed any arguments, 2 if it was passed 1 argument, and so on. This table of Linux system calls may come in handy.","title":"Helpful Hints"},{"location":"pa/pa1/#submission_1","text":"To submit your solution for this sub-assignment, run the gradinator-submit command from the /home/student/x86 directory and follow the prompts that appear. You may submit as many times as you like ahead of the deadline, but only your most recent submission will be counted. Note that part 1 (gdb) and part 2 (x86) must be submitted separately . For this part, after submitting an attempted solution, you'll subsequently receive a message from our auto-grading server to your email address associated with this class. The email will contain a breakdown of the steps it took to grade your assignment, points earned (or not) at each step, and a total score which\u2014apart from exceptional circumstances\u2014you can consider your final grade for this sub-assignment.","title":"Submission"},{"location":"pa/pa1/#bugs","text":"If you find a bug in this assignment please create an issue here .","title":"Bugs"},{"location":"pa/pa2/","text":"Assignment 2 75 pts + 25pts extra for sploit4 \u00b6 Deadline: Sunday, February 10, 2019 by 11:59:59 PM Early Turn-In: Thursday, February 7, 2019 by 11:59:59 PM (10% bonus) The goal of this assignment is to gain hands-on experience with the effects of buffer overflows and other memory-safety bugs. You will be provided a skeleton for implementing these exploits in C. You must not discuss your solution with other students until three days after the assignment deadline. You may consult any online references you wish. If you use any code in your answer that you did not write yourself, you must document that fact. Failure to do so will be considered a violation of the academic integrity policy. Getting Started \u00b6 To complete this assignment you will be provided with a VirtualBox VM and a set of files including a turn-in script. VM Image \u00b6 In order to match the environment in which your submission will be graded, all work for this assignment must be done on the VirtualBox VM we have provided, named pa2box . You can download the VM image here . Import the pa2box.vbox file into VirtualBox via the Machine \u2192 Add menu item. Don't create a brand-new VirtualBox VM or import the pa2box-data.vmdk file on its own: if you do this, you won't have the correct configuration. After importing the VM, select it in the VirtualBox sidebar and start it with the green arrow button or the Machine \u2192 Start menu item. The VM is configured with two users: student , with password hacktheplanet ; and root , with password hackallthethings . Instead of using the command line through VirtualBox, we recommend that you SSH into your VM from another client. The VM image is configured to expose an SSH server on port 2222 of your system's loopback address ( 127.0.0.1 ). To SSH into the VM (from your host system running VirtualBox, not from inside the VM): ssh -p 2222 student@127.0.0.1 To copy files from your computer to the VM: scp -P 2222 -r /path/to/files/ student@127.0.0.1:/home/student To copy files from the VM to your computer: scp -P 2222 student@127.0.0.1:/path/to/files/ /destination/path Please note that SSH is disabled for root , so you can only SSH in as the student user. You can still log in as root using su or by logging into the VM directly. Assignment Files \u00b6 Starter files are included inside the student home directory of the VM image. The targets directory contains a Makefile to generate target executables specific to your PID (as well as a folder called base , which you should not modify, used to generate the targets). Exploit starter code can be found in the sploits1 - sploits4 directories: one per each of the four vulnerable target programs. Each of these contains a Makefile , a shellcode.h header file providing Aleph One's shellcode, and a sploitN.c file in which you should write your exploit code (in addition to an assignment.toml file, which should not be modified). You will be writing an exploit for each of the four vulnerable programs provided in the assignment. Each exploit, when run in the VM with its target installed setuid-root in /tmp , should yield a root shell ( /bin/sh ). You can verify that the shell has been launched as root by typing whoami , to which you should see the response root . You must use Aleph One\u2019s shellcode in shellcode.h , as this will be used in the grading scripts. For each exploit, in addition to your .c file, please also create a corresponding file writeup.txt containing a brief description of how the exploit works. Exploit Generation \u00b6 To complete the assignment, you will need to: generate targets specific to your PID; use GDB to find vulnerabilities in the targets; and, finally, craft your exploit programs. Generating the Targets \u00b6 Run make generate in the targets directory to create the four target source files specific to you. This will prompt you for your student ID ( A######## or U######## ), which will be used to randomize portions of the contents of target1.c - target4.c . Run make to build the target binaries target1 - target4 . Run sudo make install to copy the binaries into the /tmp directory. Finally, run sudo make setuid to mark the binaries as setuid-root. If you forget this step, then your exploits will end up launching a normal shell instead of a root shell! Using GDB \u00b6 To run an exploit in GDB, run, e.g., gdb -e sploit1 -s /tmp/target1 to execute sploit1 and use the symbol file target1 . We recommend the following workflow in GDB: Starting. Set breakpoints that you can later use for analysis: b foo \u2014 break at function foo b *0x08048489 \u2014 break at the instruction at address 0x08048489 r \u2014 run the executable Analyzing. Examine memory, registers, etc; disassemble code; show stack frames, backtrace, etc; and more: disas foo \u2014 disassemble function foo i r \u2014 view registers where \u2014 view stack frames x <loc> \u2014 examine memory x $eip \u2014 examine current instruction pointer x /10x $esp \u2014 examine 10 words at top of stack x /10x buf \u2014 examine 10 words in buf x /10i $eip \u2014 examine 10 instructions starting at instruction pointer x /10i foo \u2014 examine 10 instructions starting at foo Continuing. Continue analysis: c \u2014 continue execution until next breakpoint/watchpoint si \u2014 step to the next instruction s \u2014 step to the next line of source code Note that this is only a cursory overview of GDB; much more info is available from online resources. Exploit Notes \u00b6 For this assignment you should read and have a solid understanding of Aleph One\u2019s \u201cSmashing the Stack for Fun and Profit\u201d. Aleph One gives code that calculates addresses on the target\u2019s stack based on addresses on the exploit\u2019s stack. However, addresses on the exploit\u2019s stack can change based on how the exploit is executed (working directory, arguments, environment, etc.). You must therefore hard-code target stack locations in your exploits. You should not use a function such as get_sp() in the exploits you hand in. You should only modify the sploitN.c files and corresponding writeup.txt files; i.e., your exploits should work with unmodified Makefiles, targets, etc. In grading, the exploits may be run with a different environment and different working directory. Your exploits must work in these cases also. Your exploit programs should not take any command-line arguments. Shutting down the VM removes the files in /tmp; if you want to keep them, pause the VM and save its state! Submission \u00b6 To submit your solution for each sub-assignment, run the gradinator-submit command from the corresponding sploit1 - sploit4 directory and follow the prompts that appear. You may submit as many times as you like ahead of the deadline, but only your most recent submission will be counted. Note that each of the four sub-assignments must be submitted separately . For each sub-assignment, after submitting an attempted solution, you'll subsequently receive a message from our auto-grading server to your email address associated with this class. The email will contain a breakdown of the steps it took to grade your assignment, points earned (or not) at each step, and a total score for that sub-assignment. Each one is worth 25 points.","title":"Assignment 2"},{"location":"pa/pa2/#assignment-2-75-pts-25pts-extra-for-sploit4","text":"Deadline: Sunday, February 10, 2019 by 11:59:59 PM Early Turn-In: Thursday, February 7, 2019 by 11:59:59 PM (10% bonus) The goal of this assignment is to gain hands-on experience with the effects of buffer overflows and other memory-safety bugs. You will be provided a skeleton for implementing these exploits in C. You must not discuss your solution with other students until three days after the assignment deadline. You may consult any online references you wish. If you use any code in your answer that you did not write yourself, you must document that fact. Failure to do so will be considered a violation of the academic integrity policy.","title":"Assignment 2 75 pts + 25pts extra for sploit4"},{"location":"pa/pa2/#getting-started","text":"To complete this assignment you will be provided with a VirtualBox VM and a set of files including a turn-in script.","title":"Getting Started"},{"location":"pa/pa2/#vm-image","text":"In order to match the environment in which your submission will be graded, all work for this assignment must be done on the VirtualBox VM we have provided, named pa2box . You can download the VM image here . Import the pa2box.vbox file into VirtualBox via the Machine \u2192 Add menu item. Don't create a brand-new VirtualBox VM or import the pa2box-data.vmdk file on its own: if you do this, you won't have the correct configuration. After importing the VM, select it in the VirtualBox sidebar and start it with the green arrow button or the Machine \u2192 Start menu item. The VM is configured with two users: student , with password hacktheplanet ; and root , with password hackallthethings . Instead of using the command line through VirtualBox, we recommend that you SSH into your VM from another client. The VM image is configured to expose an SSH server on port 2222 of your system's loopback address ( 127.0.0.1 ). To SSH into the VM (from your host system running VirtualBox, not from inside the VM): ssh -p 2222 student@127.0.0.1 To copy files from your computer to the VM: scp -P 2222 -r /path/to/files/ student@127.0.0.1:/home/student To copy files from the VM to your computer: scp -P 2222 student@127.0.0.1:/path/to/files/ /destination/path Please note that SSH is disabled for root , so you can only SSH in as the student user. You can still log in as root using su or by logging into the VM directly.","title":"VM Image"},{"location":"pa/pa2/#assignment-files","text":"Starter files are included inside the student home directory of the VM image. The targets directory contains a Makefile to generate target executables specific to your PID (as well as a folder called base , which you should not modify, used to generate the targets). Exploit starter code can be found in the sploits1 - sploits4 directories: one per each of the four vulnerable target programs. Each of these contains a Makefile , a shellcode.h header file providing Aleph One's shellcode, and a sploitN.c file in which you should write your exploit code (in addition to an assignment.toml file, which should not be modified). You will be writing an exploit for each of the four vulnerable programs provided in the assignment. Each exploit, when run in the VM with its target installed setuid-root in /tmp , should yield a root shell ( /bin/sh ). You can verify that the shell has been launched as root by typing whoami , to which you should see the response root . You must use Aleph One\u2019s shellcode in shellcode.h , as this will be used in the grading scripts. For each exploit, in addition to your .c file, please also create a corresponding file writeup.txt containing a brief description of how the exploit works.","title":"Assignment Files"},{"location":"pa/pa2/#exploit-generation","text":"To complete the assignment, you will need to: generate targets specific to your PID; use GDB to find vulnerabilities in the targets; and, finally, craft your exploit programs.","title":"Exploit Generation"},{"location":"pa/pa2/#generating-the-targets","text":"Run make generate in the targets directory to create the four target source files specific to you. This will prompt you for your student ID ( A######## or U######## ), which will be used to randomize portions of the contents of target1.c - target4.c . Run make to build the target binaries target1 - target4 . Run sudo make install to copy the binaries into the /tmp directory. Finally, run sudo make setuid to mark the binaries as setuid-root. If you forget this step, then your exploits will end up launching a normal shell instead of a root shell!","title":"Generating the Targets"},{"location":"pa/pa2/#using-gdb","text":"To run an exploit in GDB, run, e.g., gdb -e sploit1 -s /tmp/target1 to execute sploit1 and use the symbol file target1 . We recommend the following workflow in GDB: Starting. Set breakpoints that you can later use for analysis: b foo \u2014 break at function foo b *0x08048489 \u2014 break at the instruction at address 0x08048489 r \u2014 run the executable Analyzing. Examine memory, registers, etc; disassemble code; show stack frames, backtrace, etc; and more: disas foo \u2014 disassemble function foo i r \u2014 view registers where \u2014 view stack frames x <loc> \u2014 examine memory x $eip \u2014 examine current instruction pointer x /10x $esp \u2014 examine 10 words at top of stack x /10x buf \u2014 examine 10 words in buf x /10i $eip \u2014 examine 10 instructions starting at instruction pointer x /10i foo \u2014 examine 10 instructions starting at foo Continuing. Continue analysis: c \u2014 continue execution until next breakpoint/watchpoint si \u2014 step to the next instruction s \u2014 step to the next line of source code Note that this is only a cursory overview of GDB; much more info is available from online resources.","title":"Using GDB"},{"location":"pa/pa2/#exploit-notes","text":"For this assignment you should read and have a solid understanding of Aleph One\u2019s \u201cSmashing the Stack for Fun and Profit\u201d. Aleph One gives code that calculates addresses on the target\u2019s stack based on addresses on the exploit\u2019s stack. However, addresses on the exploit\u2019s stack can change based on how the exploit is executed (working directory, arguments, environment, etc.). You must therefore hard-code target stack locations in your exploits. You should not use a function such as get_sp() in the exploits you hand in. You should only modify the sploitN.c files and corresponding writeup.txt files; i.e., your exploits should work with unmodified Makefiles, targets, etc. In grading, the exploits may be run with a different environment and different working directory. Your exploits must work in these cases also. Your exploit programs should not take any command-line arguments. Shutting down the VM removes the files in /tmp; if you want to keep them, pause the VM and save its state!","title":"Exploit Notes"},{"location":"pa/pa2/#submission","text":"To submit your solution for each sub-assignment, run the gradinator-submit command from the corresponding sploit1 - sploit4 directory and follow the prompts that appear. You may submit as many times as you like ahead of the deadline, but only your most recent submission will be counted. Note that each of the four sub-assignments must be submitted separately . For each sub-assignment, after submitting an attempted solution, you'll subsequently receive a message from our auto-grading server to your email address associated with this class. The email will contain a breakdown of the steps it took to grade your assignment, points earned (or not) at each step, and a total score for that sub-assignment. Each one is worth 25 points.","title":"Submission"}]}