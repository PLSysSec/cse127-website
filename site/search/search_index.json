{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This course focuses on computer security, exploring a range of topics \u2013 from systems security to web security, IoT security, and privacy \u2013 to illustrate some of the modern research challenges in the area and the standards for advancement. It is not designed to be a tutorial course, but rather to give students the context to understand current security research and evaluate their interest in the field. The course will examine both the defensive and offensive side of the field. At the conclusion of the course, the student will have the foundation to conduct research in computer security and to apply the latest security research to a particular area of practice. Grading Since the primary goal of this course is to prepare to you to do research, the grading and evaluation for this course is simple: (1) participate in class discussions and (2) work on a project, write the research paper describing it, and give a short talk. Class participation (25%) Students are expected to read the assigned papers in detail. During lectures we will discuss the papers and evaluate students based on their participation. Research project (75%) In groups of 3-5, students are expected to work on a research project. The goal of the project is to do original research in computer security that can be submitted to a workshop/conference. Part of the project entails a write-up and short presentation at the end of the quarter. We will have best paper awards at the end of the quarter! Meeting time and locating Location: WLH 2207 Time: Mondays and Wednesdays 6:30-7:50PM Acknowledgements The course structure and many of the ideas are influenced (or directly from) Hovav Shacham, Stefan Savage, and Kirill Levchenko.","title":"About"},{"location":"#grading","text":"Since the primary goal of this course is to prepare to you to do research, the grading and evaluation for this course is simple: (1) participate in class discussions and (2) work on a project, write the research paper describing it, and give a short talk.","title":"Grading"},{"location":"#class-participation-25","text":"Students are expected to read the assigned papers in detail. During lectures we will discuss the papers and evaluate students based on their participation.","title":"Class participation (25%)"},{"location":"#research-project-75","text":"In groups of 3-5, students are expected to work on a research project. The goal of the project is to do original research in computer security that can be submitted to a workshop/conference. Part of the project entails a write-up and short presentation at the end of the quarter. We will have best paper awards at the end of the quarter!","title":"Research project (75%)"},{"location":"#meeting-time-and-locating","text":"Location: WLH 2207 Time: Mondays and Wednesdays 6:30-7:50PM","title":"Meeting time and locating"},{"location":"#acknowledgements","text":"The course structure and many of the ideas are influenced (or directly from) Hovav Shacham, Stefan Savage, and Kirill Levchenko.","title":"Acknowledgements"},{"location":"contact/","text":"For general information and questions, please post to the class forum . It's likely that other students will have the same question. We will post announcements on the forum (in addition to the course page), so please make sure to sign up. For urgent or personal matters matters, please contact us by email. Course mailing list Google forum: ucsd-cse227-fall18 Instructor Name: Deian Stefan Email: Office: CSE 3126 Office Hours: Fridays 3:00-4:00PM or by appointment Teaching Assistant Name: Shravan Narayan Email: Office: CSE 3148","title":"Contact information"},{"location":"contact/#course-mailing-list","text":"Google forum: ucsd-cse227-fall18","title":"Course mailing list"},{"location":"contact/#instructor","text":"Name: Deian Stefan Email: Office: CSE 3126 Office Hours: Fridays 3:00-4:00PM or by appointment","title":"Instructor"},{"location":"contact/#teaching-assistant","text":"Name: Shravan Narayan Email: Office: CSE 3148","title":"Teaching Assistant"},{"location":"fame/","text":"Below is an incomplete list of papers that resulted from CSE 227. The goal of this class is learn research by doing research and join this hall of fame. When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC, Erik Buchanan, Ryan Roemer, Hovav Shacham, and Stefan Savage, Proceedings of the ACM Conference on Computer and Communications Security, Washington, D.C., October 2008, pages 27-38. Reconsidering Physical Key Secrecy: Teleduplication via Optical Decoding, Benjamin Laxton, Kai Wang, and Stefan Savage, Proceedings of the ACM Conference on Computer and Communications Security, Washington, D.C., October 2008, pages 469-77. Neon: System Support for Derived Data Management, Qing Zhang, John McCullough, Justin Ma, Navil Schear, Michael Vrable, Amin Vahdat, Alex C. Snoeren, and Geoffrey M. Voelker, Proceedings of the ACM International Conference on Virtual Execution Environments (VEE), Pittsburgh, PA, March 2010. Beyond Heuristics: Learning to Classify Vulnerabilities and Predict Exploits, Mehran Bozorgi, Lawrence K. Saul, Stefan Savage, and Geoffrey M. Voelker, Proceedings of the ACM SIGKDD Conference, Washington D.C., July 2010. Reliably Erasing Data From Flash-based Solid State Drives, Michael Wei, Laura M. Grupp, Frederick E. Spada, and Steven Swanson, Proceedings of the 9th USENIX Conference on File and Storage Technologies, San Jose, CA, February 2011. Got Traffic? An Evaluation of Click Traffic Providers, Qing Zhang, Thomas Ristenpart, Stefan Savage, and Geoffrey M. Voelker, Proceedings of the WICOM/AIRWeb Workshop on Web Quality (WebQuality), Hyderabad, India, Mar 2011. Heat of the Moment: Characterizing the Efficacy of Thermal Camera-Based Attacks, Keaton Mowery, Sarah Meiklejohn, and Stefan Savage, Proceedings of the USENIX Workshop On Offensive Technologies (WOOT), San Francisco, CA, August 2011. Judging a site by its content: learning the textual, structural, and visual features of malicious Web pages, Sushma Nagesh Bannur, Lawrence K. Saul, and Stefan Savage, Proceedings of the ACM Workshop on Artificial Intelligence and Security (AISEC), Chicago, IL, October 2011. Eliminating Fine Grained Timers in Xen, Bhanu C. Vattikonda, Sambit Das, and Hovav Shacham, Proceedings of the Cloud Computing Security Workshop (CCSW), October 2011. Return-Oriented Programming: Systems, Languages and Applications, Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage, ACM Transactions on Information and System Security 15(1), March 2012. When Good Services Go Wild: Reassembling Web Services for Unintended Purposes, Feng Lu, Jiaqi Zhang, and Stefan Savage, Proceedings of the USENIX Workshop on Hot Topics in Security, Bellevue, WA, August 2012. On The Security of Mobile Cockpit Information Systems, Devin Lundberg, Brown Farinholt, Edward Sullivan, Ryan Mast, Stephen Checkoway, Stefan Savage, Alex C. Snoeren, and Kirill Levchenko, Proceedings of the ACM Conference on Computer and Communications Security, Scottsdale, Arizona, November 2014. Fast and Vulnerable: A Story of Telematic Failures, Ian Foster, Andrew Prudhomme, Karl Koscher, and Stefan Savage, Proceedings of the USENIX Workshop On Offensive Technologies (WOOT), Washington D.C., August 2015. On the (In)effectiveness of Mosaicing and Blurring as Tools for Document Redaction, Steven Hill, Zhimin Zhou, Lawrence Saul, and Hovav Shacham, Privacy Enhancing Technologies Symposium, Darmstadt, Germany, July 2016. Michael Smith, Craig Disselkoen, Shravan Narayan, Fraser Brown, and Deian Stefan. Browser history re:visited, Proceedings of USENIX Workshop on Offensive Technologies (WOOT). August, 2018.","title":"Hall of fame"},{"location":"ideas/","text":"Below is a list of project ideas. You can also find a long list of projects in previous runs of CSE 291 and CSE 227 . And, of course, you are welcome to come up with your own ideas. Web related Can we solve :visited once and for all ? How much of the Web will we break if we want to have a same-origin policy for history? Revisit browser private modes and evaluate tracking protection mechanisms in modern browsers (e.g., Firefox and Brave). Evaluate the effectiveness of Spectre-like timing attacks in deployed, noisy systems. Evaluate the security guarantees of out-of-browser HTTP clients (e.g., wget, cURL, and Node.js' HTTP client) especially when compared to modern browser security. Are libraries and applications handling security exceptions (e.g., redirects to HTTP) securely? Identify if implicictly-shared state in modern browsers can be used to fingerprint users, leak browsing history, etc. Evaluate Site Isolation and Cross-Origin Read Blocking implementations. Evaluate the effectiveness of DeterFox . Implement a boring, secure-by-construction Web framework (e.g., by fleshing out Frankie ). JavaScript related Revisit binding bugs in Node.js and the findbugs in third-party code (the NPM ecosystem). Are JavaScript bitcoin wallets (e.g., https://www.bitaddress.org ) secure? Is JavaScript crypto in the wild safe? (Some of the measurements in CT-Wasm indicate they may be prone to timing channels.) Can we transparently expose SGX to Node.js or browsers (e.g., to allow applications to execute JavaScript code on user data while preserving confidentiality)? Rust related Evalute if Rust unsafe code in the wild is actually unsafe? Are Rust crypto implementations constant-time? Explore macro-based approach to generating constant-time code (much like FaCT ). Extend Rocket with security enforcement. Extend our robust-library sandboxing framework to Rust. Sandboxing related Does WebAssembly make it easier to address memory and type safety for legacy, unsafe applications? Build a secure package manager , potentially using ML or PL techniques to identify malicious install-time behavior. Can we sandbox Haskell install-time and compile-time code? (See this for motivation.) Measure the effectiveness of off-the-shelf sandboxes (e.g., FireJail ) and their policies? IoT/CPS related Extend the Johnny-Five IoT platform with a safety- and security-enforcement layer. Evaluate the security guarantees of an existing IoT or CPS device. For example, OpenThings , August lock , Dexcom CGM , or Medtronic insulin pump. Evaluate the security of building systems or critical city infrastructure. Evaluate the security of vehicle-to-vehicle protocols.","title":"Project ideas"},{"location":"ideas/#web-related","text":"Can we solve :visited once and for all ? How much of the Web will we break if we want to have a same-origin policy for history? Revisit browser private modes and evaluate tracking protection mechanisms in modern browsers (e.g., Firefox and Brave). Evaluate the effectiveness of Spectre-like timing attacks in deployed, noisy systems. Evaluate the security guarantees of out-of-browser HTTP clients (e.g., wget, cURL, and Node.js' HTTP client) especially when compared to modern browser security. Are libraries and applications handling security exceptions (e.g., redirects to HTTP) securely? Identify if implicictly-shared state in modern browsers can be used to fingerprint users, leak browsing history, etc. Evaluate Site Isolation and Cross-Origin Read Blocking implementations. Evaluate the effectiveness of DeterFox . Implement a boring, secure-by-construction Web framework (e.g., by fleshing out Frankie ).","title":"Web related"},{"location":"ideas/#javascript-related","text":"Revisit binding bugs in Node.js and the findbugs in third-party code (the NPM ecosystem). Are JavaScript bitcoin wallets (e.g., https://www.bitaddress.org ) secure? Is JavaScript crypto in the wild safe? (Some of the measurements in CT-Wasm indicate they may be prone to timing channels.) Can we transparently expose SGX to Node.js or browsers (e.g., to allow applications to execute JavaScript code on user data while preserving confidentiality)?","title":"JavaScript related"},{"location":"ideas/#rust-related","text":"Evalute if Rust unsafe code in the wild is actually unsafe? Are Rust crypto implementations constant-time? Explore macro-based approach to generating constant-time code (much like FaCT ). Extend Rocket with security enforcement. Extend our robust-library sandboxing framework to Rust.","title":"Rust related"},{"location":"ideas/#sandboxing-related","text":"Does WebAssembly make it easier to address memory and type safety for legacy, unsafe applications? Build a secure package manager , potentially using ML or PL techniques to identify malicious install-time behavior. Can we sandbox Haskell install-time and compile-time code? (See this for motivation.) Measure the effectiveness of off-the-shelf sandboxes (e.g., FireJail ) and their policies?","title":"Sandboxing related"},{"location":"ideas/#iotcps-related","text":"Extend the Johnny-Five IoT platform with a safety- and security-enforcement layer. Evaluate the security guarantees of an existing IoT or CPS device. For example, OpenThings , August lock , Dexcom CGM , or Medtronic insulin pump. Evaluate the security of building systems or critical city infrastructure. Evaluate the security of vehicle-to-vehicle protocols.","title":"IoT/CPS related"},{"location":"syllabus/","text":"Date Papers Oct 1 Overview and Introduction How to Read a Paper by S. Keshav The Rise of Worse is Better by R. P. Gariel Low-Level Vulnerabilities and Defenses Oct 3 How Memory Safety Violations Enable Exploitation of Programs by M. Payer A Modern History of Offensive Security Research by D. Dai Zovi See also: Low-Level Software Security by Example by U. Erlingssona et al. Oct 8 1 Control-Flow Integrity: Precision, Security, and Performance by N. Burow et al. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity by N. Carlini et al. Oct 10 Principles and Implementation Techniques of Software-Based Fault Isolation by G. Tan Bringing the Web up to Speed with WebAssembly by A. Haas et al. Web Security Oct 15 2 Beware of Finer-Grained Origins by C. Jackson and A. Barth Securing Frame Communication in Browsers by A. Barth et al. Chromium's design documents on Site Isolation and Cross-Origin Read Blocking The Web Origin Concept by A. Barth Oct 17 Blueprint: Robust Prevention of Cross-site Scripting Attacks for Existing Browsers by M. T. Louw and V.N. Venkatakrishnan Robust Defenses for Cross-Site Request Forgery by A. Barth et al. Using positive tainting and syntax-aware evaluation to counter SQL injection attacks by W. G. J. Halfond et al. Oct 22 CSP is dead, long live CSP! On the insecurity of whitelists and the future of content security policy by L. Weichselbaum et al. Protecting Users by Confining JavaScript with COWL by D. Stefan et al. Web Privacy Oct 24 Who Left Open the Cookie Jar? A Comprehensive Evaluation of Third-Party Cookie Policies by G. Franken et al. An Analysis of Private Browsing Modes in Modern Browsers by G. Aggarwal et al. Browser History re:visited by M. Smith et al. Oct 29 Trusted Browsers for Uncertain Times by D. Kohlbrenner and H. Shacham The Design and Implementation of the Tor Browser by M. Perry The Hardware-Software Boundary Oct 31 Spectre Attacks: Exploiting Speculative Execution by P. Kocher et al. Meltdown: Reading Kernel Memory from User Space by M. Lipp et al. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution by J. Van Bulck et al. Nov 5 Hyperflow: A Processor Architecture for Nonmalleable, Timing-Safe Information-Flow Security by A. Ferraiuolo et al. GhostRider: A Hardware-Software System for Memory Trace Oblivious Computation by C. Liu et al. Automatic Vulnerability Discovery Nov 7 A Survey of Symbolic Execution Techniques by R. Baldoni et al. Under-Constrained Symbolic Execution: Correctness Checking for Real Code by D. A. Ramos and D. Engler SAGE: Whitebox Fuzzing for Security Testing by P. Godefroid et al. Nov 19 AEG: Automatic Exploit Generation by T. Avgerinos et al. NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications by A. Alhuzali et al. Driller: Augmenting Fuzzing Through Selective Symbolic Execution by N. Stephens et al. Package managers and sofware distribution Nov 26 Docker ecosystem\u2013Vulnerability Analysis by A. Martin et al. A Look In the Mirror: Attacks on Package Managers by J. Cappos et al. Nov 28 CHAINIAC: Proactive Software-Update Transparency via Collectively Signed Skipchains and Verified Builds by K. Nikitin et al. Contour: A Practical System for Binary Transparency by M. Al-Bassam and S. Meiklejohn Stepping Back Dec 3 Thirty Years Later: Lessons from the Multics Security Evaluation by P. A. Karger and R. R. Schell This World of Ours by J. Mickens Looking Back: Addendum by D. E. Bell Dec 5 How to Write a Great Research Paper by S. P. Jones How to Give a Great Research Talk by S. P. Jones On Preparing Good Talks by R. Jhala Form project groups. Submit project proposal.","title":"Syllabus"}]}